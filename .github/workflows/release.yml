# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Create Release

on:
    push:
        tags:
            - '*'

jobs:
    build:
        
        runs-on: ubuntu-latest
        
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: 'true'
            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.x
            -   name: Download Dalamud
                run: |
                    wget  -O latest.zip https://goatcorp.github.io/dalamud-distrib/latest.zip
                    mkdir -p "/home/runner/.xlcore/dalamud/Hooks/dev"
                    unzip latest.zip -d "/home/runner/.xlcore/dalamud/Hooks/dev"
            - name: Restore dependencies
              run: dotnet restore
            - name: Build
              run: dotnet build --no-restore --configuration Release
            - name: Test
              run: dotnet test --no-build --verbosity normal
            - name: Archive 
              run: |
                cd LazyGatherer/bin/x64/Release
                zip -r ../../../../LazyGatherer.zip . 
            - name: Upload a Build Artifact
              uses: actions/upload-artifact@v4
              with:
                path: |
                  ./LazyGatherer/bin/x64/Release/*
            -   name: Create Release
                id: create_release
                uses: actions/create-release@v1
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                with:
                    tag_name: ${{ github.ref }}
                    release_name: LazyGatherer ${{ github.ref }}
                    draft: false
                    prerelease: false
            - name: Upload Release Asset
              id: upload-release-asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path: ./LazyGatherer.zip
                  asset_name: LazyGatherer.zip
                  asset_content_type: application/zip
                  
            - name: Write out repo.json
              run: |
                  sed -i -E 's|("AssemblyVersion":.*)".*"|\1"${{ github.ref_name }}"|g' repo.json
                  sed -i -E 's|("DownloadLinkInstall":.*)/.*/LazyGatherer.zip|\1/${{ github.ref_name }}/LazyGatherer.zip|g' repo.json
                  sed -i -E 's|("DownloadLinkUpdate":.*)/.*/LazyGatherer.zip|\1/${{ github.ref_name }}/LazyGatherer.zip|g' repo.json
            - name: Commit repo.json
              run: |
                  git config --global user.name "Actions User"
                  git config --global user.email "actions@github.com"
                  git fetch origin actions
                  git branch -f actions ${{ github.sha }}
                  git checkout actions
                  git add repo.json
                  git commit -m "[CI] Updating repo.json for ${{ github.ref_name }}" || true
                  git push origin actions
